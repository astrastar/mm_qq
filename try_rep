import bitmex
import json
import datetime
import time
import random
import string
import traceback

# al3
al3_key = 'm07FMc8gbdZXsyfn57HxXvVy'
al3_secret = 'SVVYYKXX0L1SPPIDyHOVWfUjeod_CqcBqzrE92m8Cib18z7H'
client = bitmex.bitmex(test=False, api_key=al3_key, api_secret=al3_secret)

TIME_OUT = 600
SYMBOL = 'XBTUSD'
QTY1, QTY2, QTY3 = 50, 50, 75
SHIFT = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ACC = 'al3'
LIMIT = 2000
INC = 0.25


def try_repeat(func):
    def wrapper(*args, **kwargs):
        count = 100
        while count:
            try:
                return func(*args, **kwargs)
            except Exception as e:
                print(f'{datetime.datetime.now()} {func.__name__} Error:', e)
                count -= 1
            time.sleep(3)
    return wrapper


@try_repeat
def is_open():
    return client.Position.Position_get().result()[0][0].get('isOpen')


def random_id(size):
    """
    Генератор clOrdID
    :param size: размер 
    :return: 
    """
    s = ''
    while size > 0:
        a = random.choice(string.ascii_letters)
        b = str(random.randint(0, 99))
        s = s + a
        s = s + b
        size -= 1
    return s


@try_repeat
def orders(qty1):
    """
    Выставляет первоначальные номера
    :param qty1: размер ордера
    :return: количество выставленных ордеров
    """
    client.Order.Order_cancelAll().result()
    book = client.OrderBook.OrderBook_getL2(symbol=SYMBOL, depth=1).result()
    ask = book[0][0].get('price')
    bid = book[0][1].get('price')
    order = [{'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[0]},  #100
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[0]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[1]},  #100
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[1]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[2]},  #100 # 300
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[2]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[3]},  #300 # 600
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[3]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[4]},  #300 # 900
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[4]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[5]},  #300 # 1200
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[5]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[6]},  #600 # 1800
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[6]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[7]},  #600 # 2400
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[7]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[8]},  #600 # 3000
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[8]},
             {'symbol': 'XBTUSD', 'orderQty': -qty1, 'price': ask + SHIFT[9]},  # 600 # 3000
             {'symbol': 'XBTUSD', 'orderQty': qty1, 'price': bid - SHIFT[9]}]
    client.Order.Order_newBulk(orders=json.dumps(order)).result()
    print(f'*{ACC}* {datetime.datetime.now()} --- Orders placed ---')
    return len(order)


@try_repeat
def pos_check(ord_num):
    """
    Выставляет закрывающий ордер с пользовательским ID
    :param ord_num: количество ордеров, выставенных изначально; используется для запроса ордеров для отмены
    :return: 
    """
    while True:
        ord_id = random_id(5)
        pos = client.Position.Position_get().result()
        op_cl = pos[0][0].get('isOpen')
        price = pos[0][0].get('avgEntryPrice')
        round_price = round(price, 0)
        qty = pos[0][0].get('currentQty')
        if op_cl:
            if qty > 0:
                order_cancel('long', ord_num)
                client.Order.Order_new(symbol=SYMBOL, orderQty=-qty, price=round_price + 1,
                                       clOrdID=ord_id).result()
                print(f'*{ACC}* {datetime.datetime.now()} --- Long is open ---')
                return ord_id
            elif qty < 0:
                order_cancel('short', ord_num)
                client.Order.Order_new(symbol=SYMBOL, orderQty=-qty, price=round_price - 1,
                                       clOrdID=ord_id).result()
                print(f'*{ACC}* {datetime.datetime.now()} --- Short is open ---')
                return ord_id
        elif op_cl is False:
            pass
        time.sleep(2)


@try_repeat
def order_cancel(side, ord_num):
    """
    Отменяет ордера, открытые в противоположную открытой позиции сторону 
    :param side: сторона, в которую открыта основная сделка, противоположные ордера отменяются
    :param ord_num количество ордеров для запроса
    :return:
    """
    order_list = client.Order.Order_getOrders(symbol=SYMBOL, count=ord_num, reverse=True).result()[0]
    short_list = []
    long_list = []
    if side == 'long':
        for order in order_list:
            if order.get('side') == 'Sell':
                order_id = order.get('orderID')
                short_list.append(order_id)
        client.Order.Order_cancel(orderID=json.dumps(short_list)).result()
    elif side == 'short':
        for order in order_list:
            if order.get('side') == 'Buy':
                order_id = order.get('orderID')
                long_list.append(order_id)
        client.Order.Order_cancel(orderID=json.dumps(long_list)).result()


@try_repeat
def first_loop(ord_id, time_ot):
    """
    Отслеживает соответствие позиции и закрывающего ордера, при увеличении позиции сщщтветственно изменяет закрывающий
    ордер
    Функция ограничена по времени работы, чтобы предотвратить зависание позиции по времени
    :param ord_id: clOrdID закрывающего ордера
    :param time_ot: время работы функции, по истечении которого запускается алгоритм против зависания позиции
    :return: 
    """
    print(f'{datetime.datetime.now()} first_loop running')
    while time.time() < time_ot:
        pos = client.Position.Position_get().result()
        op_cl = pos[0][0].get('isOpen')
        price = pos[0][0].get('avgEntryPrice')
        round_price = round(price, 0)
        qty = pos[0][0].get('currentQty')
        if op_cl:
            time.sleep(2)
            open_order = client.Order.Order_getOrders(symbol=SYMBOL,
                                                      filter=json.dumps({'clOrdID': ord_id})).result()
            close_qty = open_order[0][0].get('orderQty')
            order_id = open_order[0][0].get('orderID')
            if close_qty == qty:
                pass
            elif close_qty < abs(qty):
                if qty > 0:
                    client.Order.Order_amend(orderID=order_id, orderQty=-qty, price=round_price + 1).result()
                elif qty < 0:
                    client.Order.Order_amend(orderID=order_id, orderQty=-qty, price=round_price - 1).result()
        elif op_cl is False:
            client.Order.Order_cancelAll().result()
            print(f'*{ACC}* {datetime.datetime.now()} --- Position close ---\n\n')
            break
        time.sleep(2)


@try_repeat
def increase(ord_num):
    """
    Увеличивает позицию при зависании по времени
    :param: ord_num: количество ордеров для запроса
    :return: 
    """
    print(f'{datetime.datetime.now()} increase running')
    pos = client.Position.Position_get().result()
    op_cl = pos[0][0].get('isOpen')
    qty = pos[0][0].get('currentQty')
    liq_price = pos[0][0].get('liquidationPrice')
    book = client.OrderBook.OrderBook_getL2(symbol=SYMBOL, depth=1).result()
    bid = book[0][1].get('price')
    ask = book[0][0].get('price')
    ord_id = random_id(5)
    print(f'{datetime.datetime.now()} ord_id = {ord_id}')
    if op_cl is False:
        client.Order.Order_cancelAll().result()
        print(f'*{ACC}* {datetime.datetime.now()} --- Position close ---\n\n')
        return None
    elif op_cl:
        if abs(bid - liq_price) < LIMIT:
            print(f'*{ACC}* {datetime.datetime.now()} --- Not enough margin ---')
            return None
        elif abs(bid - liq_price) > LIMIT:
            size = round(qty * INC, 0)
            if qty > 0:
                order_cancel_reverse2('long', ord_num)
                print(f'{datetime.datetime.now()} ord_id = {ord_id}')
                client.Order.Order_new(symbol=SYMBOL, orderQty=size, price=bid - 1, clOrdID=ord_id).result()
                print(f'*{ACC}* {datetime.datetime.now()} --- New order: id {ord_id}, size {size} ---')
            elif qty < 0:
                order_cancel_reverse2('short', ord_num)
                print(f'{datetime.datetime.now()} ord_id = {ord_id}')
                client.Order.Order_new(symbol=SYMBOL, orderQty=size, price=ask + 1, clOrdID=ord_id).result()
                print(f'*{ACC}* {datetime.datetime.now()} --- New order: id {ord_id}, size {size} ---')
            time.sleep(2)
    check(ord_id)


@try_repeat
def check(ord_id):
    """
    Проверяет исполнение ордера, увеличивающего позицию при зависании
    :param ord_id: клиентский ID ордера, увеличивающего позицию
    :return: 
    """
    # TODO придумать что-нибудь с запросами в начале функции, чтобы их было меньше
    print(f'{datetime.datetime.now()} check is running')
    while True:
        pos = client.Position.Position_get().result()
        op_cl = pos[0][0].get('isOpen')
        qty = pos[0][0].get('currentQty')
        time.sleep(1)
        book = client.OrderBook.OrderBook_getL2(symbol=SYMBOL, depth=1).result()
        bid = book[0][1].get('price')
        ask = book[0][0].get('price')
        time.sleep(1)
        cur_ord = client.Order.Order_getOrders(symbol=SYMBOL,
                                               filter=json.dumps({'clOrdID': ord_id})).result()[0][0]
        ord_status = cur_ord.get('ordStatus')
        ord_price = cur_ord.get('price')
        order_id = cur_ord.get('orderID')
        if op_cl:
            if ord_status == 'Filled':
                print(f'*{ACC}* {datetime.datetime.now()} --- Position increased ---')
                break
            elif ord_status == 'Canceled':
                print(f'*{ACC}* {datetime.datetime.now()} --- Order {ord_id} canceled ---')
                break
            elif ord_status == 'New':
                if qty > 0:
                    if bid - ord_price > 1:
                        client.Order.Order_amend(orderID=order_id, price=bid - 1).result()
                    else:
                        pass
                elif qty < 0:
                    if ord_price - ask > 1:
                        client.Order.Order_amend(orderID=order_id, price=ask + 1).result()
                    else:
                        pass
        elif op_cl is False:
            print(f'*{ACC}* {datetime.datetime.now()} --- Position close ---\n\n')
            client.Order.Order_cancelAll().result()
            break
        time.sleep(2)


@try_repeat
def order_cancel_reverse(side, ord_num):
    """
    Отменяет ордера, открытые в ту же сторону, что и позици. Испольуется при увеличении позиции при зависании, чтобы
    убрать ранее выставленные ордера и оставить один новый
    :param side: сторона, в которую открыта основная сделка, ордера в эту же сторону отменяются
    :param ord_num: количество запрашиваемых ордеров
    :return:
    """
    order_list = client.Order.Order_getOrders(symbol=SYMBOL, count=ord_num, reverse=True).result()[0]
    print(f'{datetime.datetime.now()} Orders got')
    short_list = []
    long_list = []
    if side == 'long':
        for order in order_list:
            if order.get('side') == 'Buy':
                order_id = order.get('orderID')
                short_list.append(order_id)
        print(short_list)
        client.Order.Order_cancel(orderID=json.dumps(short_list)).result()
        print(f'{datetime.datetime.now()} Orders cancelled')
    elif side == 'short':
        for order in order_list:
            if order.get('side') == 'Sell':
                order_id = order.get('orderID')
                long_list.append(order_id)
        print(long_list)
        client.Order.Order_cancel(orderID=json.dumps(long_list)).result()
        print(f'{datetime.datetime.now()} Orders cancelled')


@try_repeat
def order_cancel_reverse2(side, ord_num):
    """
    Отменяет ордера, открытые в ту же сторону, что и позици. Испольуется при увеличении позиции при зависании, чтобы
    убрать ранее выставленные ордера и оставить один новый
    :param side: сторона, в которую открыта основная сделка, ордера в эту же сторону отменяются
    :param ord_num: количество запрашиваемых ордеров
    :return:
    """
    order_list = client.Order.Order_getOrders(symbol=SYMBOL, count=ord_num, reverse=True).result()[0]
    print(f'{datetime.datetime.now()} Orders got')
    short_list = []
    long_list = []
    if side == 'long':
        for order in order_list:
            if order.get('side') == 'Buy' and order.get('ordStatus') == 'New':
                order_id = order.get('orderID')
                long_list.append(order_id)
            else:
                pass
        if long_list is False:
            print(long_list)
            return
        else:
            print(long_list)
            client.Order.Order_cancel(orderID=json.dumps(long_list)).result()
            print(f'{datetime.datetime.now()} Orders cancelled')
    elif side == 'short':
        for order in order_list:
            if order.get('side') == 'Sell' and order.get('ordStatus') == 'New':
                order_id = order.get('orderID')
                short_list.append(order_id)
            else:
                pass
        if short_list is False:
            print(short_list)
            return
        else:
            print(short_list)
            client.Order.Order_cancel(orderID=json.dumps(short_list)).result()
            print(f'{datetime.datetime.now()} Orders cancelled')

while True:
    ord_count = orders(QTY1)
    ORD_ID = pos_check(ord_count)
    while True:
        # position = client.Position.Position_get().result()[0][0].get('isOpen')
        start_time = time.time()
        end_time = start_time + TIME_OUT
        if is_open():
            first_loop(ORD_ID, end_time)
            if is_open():
                increase(ord_count)
            elif is_open() is False:
                break
        elif is_open() is False:
            break

# while True:
#     while True:
#         print('Loop l start')
#         ord_count = orders(QTY1)
#         if ord_count == 0:
#             print('Loop 1 <ord_count> break')
#             break
#         else:
#             ORD_ID = pos_check(ord_count)
#             if ORD_ID == 0:
#                 print('Loop 1 <ORD_ID> break')
#                 break
#             else:
#                 while True:
#                     print('Loop 2 start')
#                     # position = client.Position.Position_get().result()[0][0].get('isOpen')
#                     start_time = time.time()
#                     end_time = start_time + TIME_OUT
#                     if is_open():
#                         first_loop2(ORD_ID, end_time)
#                         if is_open():
#                             increase(ord_count)
#                         elif is_open() is False:
#                             print('Loop 2 break')
#                             break
#                     elif is_open() is False:
#                         print('Loop 2 break')
#                         break
